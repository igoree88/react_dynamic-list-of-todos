{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","query","done","visibaleTodos","filter","todo","lowerQuery","toLowerCase","includesQyery","title","includes","completed","className","map","classNames","type","readOnly","checked","onClick","userId","id","request","url","fetch","then","response","json","CurrentUser","useState","user","setUser","useEffect","UserFromServer","getUser","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","setQuery","setDone","todosFromServer","htmlFor","placeholder","value","onChange","event","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83921f54.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[],\n  query: string,\n  done: string,\n  selectUser: (userId: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    selectUser,\n    query,\n    done,\n  },\n) => {\n  const visibaleTodos = todos.filter(todo => {\n    const lowerQuery = query.toLowerCase();\n    const includesQyery = todo.title.toLowerCase().includes(lowerQuery);\n\n    switch (done) {\n      case 'active':\n        return includesQyery && !todo.completed;\n      case 'completed':\n        return includesQyery && todo.completed;\n      default:\n        return includesQyery;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibaleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': todo.completed === false,\n                  'TodoList__item--checked': todo.completed === true,\n                },\n              )}\n            >\n              {' '}\n              {/* --checked */}\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  selectUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n\n      </div>\n    </div>\n  );\n};\n/*\n<li className=\"TodoList__item TodoList__item--unchecked\">\n          <label>\n            <input type=\"checkbox\" readOnly />\n            <p>delectus aut autem</p>\n          </label>\n\n          <button\n            className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n            type=\"button\"\n          >\n            User&nbsp;#1\n          </button>\n        </li>\n\n        <li className=\"TodoList__item TodoList__item--checked\">\n          <label>\n            <input type=\"checkbox\" checked readOnly />\n            <p>distinctio vitae autem nihil ut molestias quo</p>\n          </label>\n\n          <button\n            className=\"TodoList__user-button button\"\n            type=\"button\"\n          >\n            User&nbsp;#2\n          </button>\n        </li>\n\n*/\n","const API_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string): Promise<any> => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodos = ():Promise<Todo[]> => {\n  return request('/todos')\n    .then(todosFromServer => todosFromServer);\n};\n\nexport const getUser = (userId: number):Promise<User> => {\n  return request(`/users/${userId}`)\n    .then(UserFromServer => UserFromServer);\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ninterface Props {\n  userId: number,\n  selectUser: (userId: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId).then(UserFromServer => {\n      setUser(UserFromServer);\n    });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{user?.id}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n         \"\n        type=\"button\"\n        onClick={() => {\n          selectUser(0);\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(1);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [done, setDone] = useState('0');\n\n  // eslint-disable-next-line max-len\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__box\">\n        <h1>\n          Please fill out the fields to find needed todo:\n        </h1>\n\n        <div>\n          <label htmlFor=\"todo\">Serch Todo:</label>\n          <input\n            className=\"input\"\n            placeholder=\"Please enter Todo\"\n            type=\"text\"\n            value={query}\n            id=\"todo\"\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"selectStatus\">Select status:</label>\n          <select\n            name=\"done\"\n            value={done}\n            id=\"selectStatus\"\n            onChange={(event) => {\n              setDone(event.target.value);\n            }}\n          >\n            <option\n              value=\"0\"\n              disabled\n            >\n              Please select status\n            </option>\n\n            <option\n              value=\"all\"\n            >\n              All\n            </option>\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n\n          </select>\n        </div>\n\n      </div>\n      <div className=\"App__sidebar\">\n        {todos && (\n          <TodoList\n            todos={todos}\n            selectUser={selectUser}\n            query={query}\n            done={done}\n          />\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}